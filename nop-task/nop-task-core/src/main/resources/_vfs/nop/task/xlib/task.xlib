<lib x:schema="/nop/schema/xlib.xdef" xmlns:x="/nop/schema/xdsl.xdef" xmlns:c="c" xmlns:xpl="xpl"
>

    <tags>

        <GenActionFromTaskFlow>
            <attr name="name" type="String" mandatory="true"/>
            <attr name="taskName" type="String" mandatory="true"/>
            <attr name="taskVersion" type="Long" optional="true"/>

            <source>
                <c:script>
                    import io.nop.task.utils.TaskFlowModelHelper;

                    const taskFlowModel = TaskFlowModelHelper.loadTaskFlowModel(taskName,taskVersion);
                </c:script>

                <query xpl:is="${stepModel.graphqlOperationType}" name="${name}" displayName="${stepModel.displayName}">
                    <arg name="request" kind="RequestBean">
                        ${taskFlowModel.inputsSchemaNode}
                    </arg>
                    <arg name="selection" type="io.nop.api.core.beans.FieldSelectionBean"
                         kind="FieldSelection"/>
                    <arg name="svcCtx" type="io.nop.core.context.IServiceContext" kind="ServiceContext"/>

                    <return>
                        ${taskFlowModel.outputsSchemaNode}
                    </return>

                    <source><![CDATA[
                        const taskFlowManager = inject('nopTaskFlowManager');
                        const task = taskFlowManager.getTask(taskName,taskVersion);
                        const taskRt = taskFlowManager.newTaskRuntime(task, false, svcCtx,$scope);
                        return task.execute(taskRt, selection?.sourceFields).asyncOutputs();
                    ]]></source>
                </query>
            </source>
        </GenActionFromTaskFlow>

        <Execute>
            <attr name="taskModelPath" stdDomain="v-path" optional="true"/>
            <attr name="taskName" type="String" optional="true"/>
            <attr name="taskVersion" type="Long" optional="true"/>
            <attr name="inputs" type="Map" optional="true"/>
            <attr name="outputNames" optional="true"/>
            <attr name="asyncExec" type="Boolean" optional="true"/>

            <attr name="svcCtx" type="io.nop.core.context.IServiceContext" implicit="true" optional="true"/>

            <source><![CDATA[
                const taskFlowManager = inject('nopTaskFlowManager');
                const task = taskModelPath? taskFlowManager.loadTaskFromPath(taskModelPath) :
                            taskFlowManager.getTask(taskName,taskVersion);

                const taskRt = taskFlowManager.newTaskRuntime(task, false, svcCtx, $scope);
                if(inputs != null){
                    taskRt.setInputs(inputs);
                }
                if(asyncExec){
                    return task.execute(taskRt, outputNames).asyncOutputs();
                }else{
                    return task.execute(taskRt, outputNames).syncGetOutputs();
                }
            ]]></source>
        </Execute>

        <output>
            <attr name="name" mandatory="true"/>
            <attr name="value"/>
            <attr name="taskRt" implicit="true"/>

            <source>
                taskRt.assign(name,value);
            </source>
        </output>
    </tags>
</lib>