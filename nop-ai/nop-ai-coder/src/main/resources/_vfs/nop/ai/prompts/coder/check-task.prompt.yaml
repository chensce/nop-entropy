template: |
  【任务目标】
  请根据以下标准检查给定的NopTaskFlow实现是否完全满足原始需求。如果不需要修改，仅返回`[NO_CHANGE]`，否则返回修改后的XML
  
  【评估标准】
  1. 语法合规性检查
  - 是否严格遵循NopTaskFlow DSL语法规范
  - 所有step的name属性是否唯一
  
  2. 功能完整性验证
  - 是否完整实现了需求文档中的所有要求
  - 是否包含前置条件检查步骤
  - 是否分解为多个逻辑步骤
  - 每个step是否包含必要的注释说明
  
  3. 业务逻辑正确性
  - 是否正确处理输入
  - 是否正确生成输出
  - 是否考虑了异常处理场景
  
  4. 代码质量评估
  - 是否合理使用XPL模板语法。`&lt;bo:DoUpdate>`等标签的data参数是否作为属性传递
  - 是否避免不必要的服务导入。
  - 变量作用域使用是否恰当。是否只在需要跨步骤访问时使用`&lt;task:assign>`
  - 是否所有变量都是先定义（通过let,`xpl:return`或者`&lt;task:assign>`）再使用
  - 绝对禁止在`&lt;c:script>`内直接写XPL标签
  - 是否符合XPL最佳实践
  
  【评估方法】
  1. 结构分析：检查XML文档结构和元素嵌套关系
  2. 逻辑验证：逐步跟踪每个step的执行逻辑
  3. 数据流追踪：确认输入如何转换为输出
  4. 边界测试：检查异常情况处理
  
  特别注意：
   - 如果实现中使用了`&lt;task:import>`，需验证是否确实必要
   - 确保所有数据操作都通过CRUD标签实现
   - 验证是否包含用例要求的所有业务逻辑
  
  【输出要求】
  对代码实现进行评分（1到10）。如果不需要修改，仅返回[NO_CHANGE]，否则返回修改后的XML
  
  【NopTaskFlow语法】
  ${promptModel.getOutput('RESULT').xdefForAi}
  
  1. xpl表示节点是一个xpl段，它的内容使用【XPL模板语法】， 可以调用多个xpl标签
  2. 通过next和nextOnError表示成功和失败时如何迁移到下一步骤。如果不指定，则按照step的先后顺序执行
  3. 仅在错误可忽略时使用nextOnError跳转到条件分支，否则直接向外抛出异常即可
  4. 尽量用已有标签和函数实现，只有极端必要时才使用`&lt;task:import>`导入的服务对象。增删改查不应使用服务对象。服务对象上能够调用的方法必须通过method节点声明。
  5. step的name必须全局唯一
  6. 核心业务数据应该入库，而不是仅在内存中完成计算，除非是试算过程
  
  
  【XPL模板语法】
  <ai-coder:IncludeText fileName="v:/nop/ai/prompts/coder/xpl-lang.md" xpl:lib="/nop/ai/xlib/ai-coder.xlib" />
  
  【待检查代码】
  ${dslNode.xml()}
  
  【需求文档】
  ${requirements}

inputs:
  - name: dslNode
    mandatory: true

  - name: requirements
    mandatory: true

outputs:
  - name: noChange
    type: Boolean
    parseFromResponse:
      containsText: [NO_CHANGE]

  - name: RESULT
    xdefPath: /nop/ai/schema/coder/task.xdef
    format: xml
    when: |
      !chatExchange.outputs.noChange
    defaultExpr: dslNode