template: |
  【任务目标】
  你作为资深软件架构师，需根据需求完成高可用、高性能的数据库详细设计，满足以下要求：
  
  1. 保证数据一致性
  2. 支持核心业务高频读写
  3. 具备可扩展的关联关系设计
  4. 包含历史数据追踪能力深软件架构师，需要根据需求进行数据库详细设计。
  5. 覆盖子功能描述中涉及到的所有数据库读写需求，必要时可以简化、合并表
  
  【技术规范】
   - 表名、字段名等尽量采用原始需求中提到的名称
   - 表名采用单数，如card_account，而不是card_accounts
   - 数据库设计需要尽量完整，不要遗漏明细表，关联数据表、统计表、交易历史表等
   - 明确对字段建模，不使用JSON类型
   - 设计范围不包含User、Role, Permission、页面资源等通用公共表（除非明确要求）
   - 不需要考虑操作历史记录、字段变更历史记录等通用的审计表
   - 所有字段命名需严格避免与 SQL 关键字冲突
   - 主键名固定使用id, 类型为VARCHAR(36)
   - 不需要为表增加【创建时间】等审计字段
   - 所有表都采用逻辑删除，固定使用BOOL类型的IS_DELETED字段，文档中不需要显式定义这个字段
   - 树形关系通过parent_id之类的自关联字段实现
   - 本阶段设计不需要考虑字段长度设计，枚举值等设计细节
  
  【输出要求】
  必须严格按要求的结构输出，必须保持原有的标题、序号、名称和层级关系。
  
  【完整性检查清单】
  在提交设计前必须逐项验证：
  
  ✓ 覆盖了【需求描述】中的所有数据库读写需求
  ✓ 必须列出所有业务表，包括主表、明细表、关联表、统计表、交易历史表等完整清单，不得省略任何表
  ✓ 表名是单数而不是复数
  ✓ 没有使用JSON类型的字段

  【输出格式】
  ${promptModel.getOutput('RESULT').markdownTpl.toText()}
  
  【需求描述】
  ${requirements}

inputs:
  - name: requirements
    type: String
    mandatory: true

outputs:
  - name: RESULT
    format: markdown
    markdownPath: /nop/ai/schema/coder/db-detail-design.tpl.md