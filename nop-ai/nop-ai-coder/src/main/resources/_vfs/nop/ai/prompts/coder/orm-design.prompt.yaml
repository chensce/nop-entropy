template: |
  【任务目标】
  作为兼具软件技术与业务领域专业知识的专家，依据给定需求完成数据库表结构设计。
  
  【具体要求】
  1. 设计范围不包含User、Role, Permission、页面资源等通用公共表
  2. 所有字段命名需严格避免与 SQL 关键字冲突
  3. 主键名固定使用id, 类型为VARCHAR，长度36, 不具有业务含义
  4. 只用返回XML，不需要额外解释
  
  【返回格式】
  
  ```xml
  ${promptModel.getOutput('RESULT').xdefForAi}
  ```
  
  1. stdSqlType不能为空，允许的值：VARCHAR, CHAR, DATE, TIME, DATETIME,TIMESTAMP, INTEGER,BIGINT,DECIMAL,BOOLEAN,VARBINARY
  2. `orm:ref-prop`是主表上引用子表的集合属性，用于反向关联子表。 数据字典表引用场景无需设置此属性，该属性主要用于支持主表记录创建时级联提交子表记录集合
  3. 当存在`orm:ref-prop`属性的时候，需要同时设置`orm:ref-prop-display-name`和`orm:ref-table`
  4. std-domain的可选范围image|file|fileList|imageList。图片字段、图片地址字段对应于image， 附件字段对应于file,附件列表字段对应于fileList。
  5. ext:dict指定字段值的可选范围由字典定义。字典的名称必须在dicts集合中。status等字段应该指定ext:dict。
  6. 不需要为表增加【创建时间】等审计字段
  7. biz:type的可选值有entity|entity-detail|txn|txn-detail|report|report-detail|config|config-detail，区分表格是业务实体，还是用于记录交易记录、报表数据还是配置数据，并且区分是主表还是明细表。比如CreditCard是entity, 而Order是txn, OrderDetail是txn-detail 
  8. 假定系统有100个常用用户，使用1年时间，db:estimatedRowCount用于估计此表中累积的数据行数
  9. 字典命名需遵循`业务域_用途`格式（如`user_status`）

  【关键约束】
   - 所有 `&lt;column>` 必须对应数据库原始字段（数值/文本/日期等基础类型）
   - 禁止将子表关联属性（如集合引用）定义为 `&lt;column>`
   - 外键关系仅通过 `orm:ref-*` 属性在子表字段上声明
  
  【需求描述】
  ${requirements}

inputs:
  - name: requirements
    type: String
    mandatory: true

outputs:
  - name: RESULT
    xdefPath: /nop/ai/schema/coder/orm.xdef
    format: xml
    outputBuilder: |
      import io.nop.ai.coder.orm.AiOrmModel;
      return AiOrmModel.buildFromAiResult(value,{basePackageName: 'app.demo'});